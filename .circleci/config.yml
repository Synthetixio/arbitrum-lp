version: 2.1

parameters:
  node-version:
    type: string
    default: '20.11.0'

commands:
  yarn-install:
    steps:
      - run: yarn install --immutable

  install-foundry:
    steps:
      - run:
          name: Install foundry used for cannon and e2e tests
          environment:
            SHELL: /bin/bash
          command: |-
            apt update && apt install --yes curl
            curl -L https://foundry.paradigm.xyz | bash
            export PATH="$PATH:$HOME/.foundry/bin"
            echo export PATH="$PATH:$HOME/.foundry/bin" > $BASH_ENV
            foundryup

  ipfs-deploy:
    parameters:
      source-dir:
        type: string
      ipfs-api:
        type: string
      ipns-key:
        type: string
      ipfs-cluster-api:
        type: string
    steps:
      - run:
          name: 'Install IPFS'
          command: |
            LATEST_VERSION=$(curl -sSL https://dist.ipfs.tech/go-ipfs/versions | tail -n 1)
            LATEST_VERSION_NUMBER=${LATEST_VERSION#*v}
            DOWNLOAD_URL="https://dist.ipfs.tech/go-ipfs/${LATEST_VERSION}/go-ipfs_${LATEST_VERSION}_linux-amd64.tar.gz"
            echo "DOWNLOAD_URL=$DOWNLOAD_URL"
            curl -sSL -o ipfs.tar.gz $DOWNLOAD_URL
            tar -xzf ipfs.tar.gz
            sudo cp -f ./go-ipfs/ipfs /usr/local/bin/
            ipfs init

      - run:
          command: ipfs daemon
          background: true
      - run:
          name: 'Wait for IPFS daemon to start'
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data '' "http://localhost:5001/api/v0/version"

      - run: ipfs add --progress=true --pin=true --recursive "<< parameters.source-dir >>"
      - run:
          name: 'Save IPFS_CID'
          command: |
            export IPFS_CID=$(ipfs add --progress=false --pin=true --recursive --quieter "<< parameters.source-dir >>")
            echo $IPFS_CID
            echo "export IPFS_CID=$IPFS_CID" >> $BASH_ENV
      - run:
          name: 'Pin to the remote IPFS node'
          command: curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-api >>/pin/add?recursive=true&progress=true&arg=$IPFS_CID"
      - run:
          name: 'Publish IPFS_CID to IPNS key << parameters.ipns-key >>'
          command: |
            curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-api >>/name/publish?key=<< parameters.ipns-key >>&arg=$IPFS_CID" | tee /tmp/name-publish-$IPFS_CID.log
            cat /tmp/name-publish-$IPFS_CID.log | jq
      - run:
          name: 'Pin to Synthetix IPFS cluster'
          command: |
            curl --silent --request POST --user "$IPFS_USER:$IPFS_PASS" "<< parameters.ipfs-cluster-api >>/pin/add?arg=$IPFS_CID" | tee /tmp/pin-add-$IPFS_CID.log
            cat /tmp/pin-add-$IPFS_CID.log | jq

jobs:
  checks:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: yarn npm audit
      - run: yarn dedupe --check
      - run: yarn deps
      - run: yarn deps:mismatched
      - run: yarn deps:circular
      - run: yarn pretty
      - run: yarn lint
      - run: yarn typecheck

  liquidity-ipfs:
    working_directory: /tmp/app
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    resource_class: large
    steps:
      - checkout
      - yarn-install
      - run: yarn workspace @snx-v3/liquidity build
      - ipfs-deploy:
          source-dir: './liquidity/ui/dist'
          ipfs-api: 'https://ipfs.synthetix.io:5001/api/v0'
          ipfs-cluster-api: 'https://ipfs.synthetix.io/api/v0'
          ipns-key: 'arbitrum-lp.synthetix.eth'

workflows:
  checks:
    unless:
      or:
        - equal: ['master', << pipeline.git.branch >>]
    jobs:
      - checks

  deploy:
    when:
      or:
        - equal: ['master', << pipeline.git.branch >>]
    jobs:
      - checks
      - liquidity-ipfs:
          requires:
            - checks
